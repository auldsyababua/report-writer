# agents/data_fetcher_agent.py
import asyncio

async def handle_data_fetch(task_details: str) -> str:
    """
    This is a specialist developer agent.
    Its job is to generate a Python script for fetching data from an external API.
    The output of this agent is a string containing the Python code.
    """
    print("ðŸ¤– Data Fetcher Agent: Generating a data fetching script...")

    # In a real scenario, an LLM would generate this code based on task_details.
    # The LLM could use an http-client MCP during development to verify endpoints
    # and generate more accurate code.
    simulated_fetch_script = f"""
# This script was generated by the Data Fetcher Agent.
# It is designed to be run in a production environment without any AI.
# Task: {task_details}

import os
import requests
import json

def fetch_report_data():
    \"\"\"
    Fetches the data required for the investor report.
    \"\"\"
    # API key and endpoint should be stored securely, e.g., in environment variables
    API_KEY = os.environ.get("FINANCIAL_API_KEY")
    API_ENDPOINT = "https://api.example-financial-data.com/v1/metrics"

    if not API_KEY:
        print("Error: FINANCIAL_API_KEY environment variable not set.")
        return None

    headers = {{"Authorization": f"Bearer {API_KEY}"}}
    
    try:
        response = requests.get(API_ENDPOINT, headers=headers, timeout=15)
        response.raise_for_status()  # Raise an HTTPError for bad responses (4xx or 5xx)
        print("Successfully fetched financial data.")
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Failed to fetch data: {e}")
        return None

if __name__ == "__main__":
    report_data = fetch_report_data()
    if report_data:
        # Save to a file or pass to the next step in the pipeline
        with open("report_data.json", "w") as f:
            json.dump(report_data, f, indent=2)
        print("Data saved to report_data.json")

```
"""
    # This agent returns the generated script as a string.
    # The Coder agent would then take this string and save it to a file.
    return f"âœ… DATA FETCHER SCRIPT CREATED:\n\n```python\n{simulated_fetch_script}\n```"

