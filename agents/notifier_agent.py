# agents/notifier_agent.py
import asyncio

async def handle_notify(task_details: str) -> str:
    """
    This is a specialist developer agent.
    Its job is to generate a Python script for sending a notification via Telegram.
    The output of this agent is a string containing the Python code.
    """
    print("ðŸ¤– Notifier Agent: Generating a Telegram notification script...")

    # An LLM would generate this code. It could use a Telegram MCP
    # in the dev environment to validate parameters and create better code.
    simulated_notify_script = f"""
# This script was generated by the Notifier Agent.
# It is designed to be run in a production environment without any AI.
# Task: {task_details}

import os
import requests

def send_telegram_report(report_content: str):
    \"\"\"
    Sends a final report to a specified Telegram chat.
    \"\"\"
    BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

    if not BOT_TOKEN or not CHAT_ID:
        print("Error: TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID must be set.")
        return

    url = f"[https://api.telegram.org/bot](https://api.telegram.org/bot){BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": report_content,
        "parse_mode": "Markdown"
    }

    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        print("Telegram notification sent successfully!")
    except requests.exceptions.RequestException as e:
        print(f"Failed to send Telegram notification: {e}")

if __name__ == "__main__":
    # Example usage:
    final_report = "## Weekly Investor Report\\n\\n- Revenue: $10,000\\n- New Users: 50"
    send_telegram_report(final_report)

```
"""
    return f"âœ… NOTIFIER SCRIPT CREATED:\n\n```python\n{simulated_notify_script}\n```"
