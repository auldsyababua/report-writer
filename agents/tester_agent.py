# agents/tester_agent.py
import asyncio
import json
from mcp import Client, aiohttp

# This agent needs both a Filesystem and a Code Execution server running.
# See: https://github.com/modelcontextprotocol/servers
MCP_FILESYSTEM_URL = "http://localhost:8080"
MCP_CODE_EXEC_URL = "http://localhost:8081"

async def handle_test(task_description: str) -> str:
    """
    Generates and runs tests for a given task.

    NOTE: Requires local Filesystem and Code Execution MCP servers.
    """
    print("ü§ñ Tester Agent: Preparing to write and run tests via MCP servers...")

    # 1. Simulate generating test code based on the task description
    simulated_test_code = """
import pytest

def test_placeholder():
    # In a real scenario, this test would be generated by an LLM
    # based on the plan and the code from the coder agent.
    assert 1 + 1 == 2
"""
    test_file_path = "test_generated_code.py"
    
    # 2. Use the Filesystem MCP to write the test file
    try:
        async with aiohttp.ClientSession() as session:
            client = Client(session)
            write_response = await client.request(
                MCP_FILESYSTEM_URL,
                "writeFile",
                {"path": test_file_path, "content": simulated_test_code}
            )
            write_result = json.loads(write_response)
            if not write_result.get("success"):
                 return f"‚ùå TESTER FAILED: Could not write test file. Error: {write_result.get('error')}"
            print(f"Successfully wrote test file to '{test_file_path}'.")
    except Exception as e:
        return f"‚ùå TESTER FAILED: Could not connect to Filesystem MCP. Error: {e}"

    # 3. Use the Code Execution MCP to run pytest
    print("Now, running tests using Code Execution MCP server...")
    try:
        async with aiohttp.ClientSession() as session:
            client = Client(session)
            exec_response = await client.request(
                MCP_CODE_EXEC_URL,
                "executeShell",
                {"command": f"pytest {test_file_path}"}
            )
            exec_result = json.loads(exec_response)
            
            stdout = exec_result.get("stdout", "")
            stderr = exec_result.get("stderr", "")
            
            return f"‚úÖ TESTS EXECUTED:\n\nSTDOUT:\n{stdout}\n\nSTDERR:\n{stderr}"
            
    except Exception as e:
        return f"‚ùå TESTER FAILED: Could not connect to Code Execution MCP. Error: {e}"
