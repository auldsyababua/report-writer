# plan_state.py
"""
Shared state management for the orchestrator.

This module can be used to store and share state between different agents
during the execution of a multi-step task.
"""

class PlanState:
    """
    A simple state manager for sharing information between agents.
    
    In a more complex system, this could:
    - Persist state to a database
    - Track execution history
    - Handle concurrent access
    - Manage task dependencies
    """
    
    def __init__(self):
        self.current_plan = None
        self.generated_files = []
        self.test_results = {}
        self.review_comments = []
        self.execution_history = []
        
    def set_plan(self, plan: str):
        """Store the current execution plan."""
        self.current_plan = plan
        self.execution_history.append({"action": "plan_created", "data": plan})
        
    def add_generated_file(self, filepath: str):
        """Track files generated by agents."""
        self.generated_files.append(filepath)
        self.execution_history.append({"action": "file_generated", "data": filepath})
        
    def add_test_result(self, test_name: str, result: dict):
        """Store test execution results."""
        self.test_results[test_name] = result
        self.execution_history.append({"action": "test_executed", "data": {test_name: result}})
        
    def add_review_comment(self, comment: str):
        """Store code review comments."""
        self.review_comments.append(comment)
        self.execution_history.append({"action": "review_added", "data": comment})
        
    def get_state_summary(self) -> dict:
        """Get a summary of the current state."""
        return {
            "has_plan": self.current_plan is not None,
            "files_generated": len(self.generated_files),
            "tests_run": len(self.test_results),
            "review_comments": len(self.review_comments),
            "total_actions": len(self.execution_history)
        }
        
    def reset(self):
        """Reset the state for a new task."""
        self.__init__()

# Global state instance that can be imported by agents
plan_state = PlanState()